==============================
identifiers
==============================

abc_123_ABC
_fn!
ρ; φ; z
ℝ
x′
θ̄
logŷ
ϵ
ŷ

---

(source_file
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier)
  (identifier))


==============================
field expressions
==============================

foo.x
bar.x.y.z

(a[1].b().c).d

---

(source_file
  (field_expression
    (identifier)
    (identifier))
  (field_expression
    (field_expression
      (field_expression
        (identifier)
        (identifier))
      (identifier))
      (identifier))

  (field_expression
    (parenthesized_expression
      (field_expression
        (call_expression
          (field_expression
            (index_expression (identifier) (integer_literal))
            (identifier))
          (argument_list))
        (identifier)))
    (identifier)))


==============================
index expressions
==============================

a[1, 2, 3]
a[1, :]

---
(source_file
  (index_expression
    (identifier)
    (integer_literal)
    (integer_literal)
    (integer_literal))
  (index_expression
    (identifier)
    (integer_literal)
    (operator)))


==============================
type parameterized expressions
==============================

Vector{Int}
Vector{<:Number}
$(usertype){T}


---

(source_file
  (parametrized_type_expression
    (identifier)
    (identifier))
  (parametrized_type_expression
    (identifier)
    (subtype_clause (identifier)))
  (parametrized_type_expression
    (interpolation_expression (parenthesized_expression (identifier)))
    (identifier)))


==============================
function call expressions
==============================

f()
g("hi", 2)
h(d...)

f(e; f = g)
g(arg; kwarg)

new{typeof(xs)}(xs)

---

(source_file
  (call_expression (identifier) (argument_list))
  (call_expression (identifier) (argument_list (string_literal) (integer_literal)))
  (call_expression (identifier) (argument_list (spread_expression (identifier))))

  (call_expression
    (identifier)
    (argument_list
      (identifier)
      (named_argument (identifier) (identifier))))
  (call_expression
    (identifier)
    (argument_list (identifier) (identifier)))

  (call_expression
    (parametrized_type_expression
      (identifier)
      (call_expression (identifier) (argument_list (identifier))))
    (argument_list (identifier))))


========================================
function call expressions with do blocks
========================================

reduce(xs) do x, y
  f(x, y)
end

---

(source_file
  (call_expression
    (identifier)
    (argument_list (identifier))
    (do_clause
      (parameter_list
        (identifier)
        (identifier))
      (call_expression
        (identifier)
        (argument_list (identifier) (identifier))))))


==============================
macro expressions
==============================

@enum(Light, red, yellow, green)

joinpath(@__DIR__, "grammar.js")

@assert x == y "a message"

@. a * x + b

@testset "a" begin
  b = c
end

@macroexpand @async accept(socket)

---

(source_file
  (macrocall_expression
    (macro_identifier (identifier))
    (argument_list (identifier) (identifier) (identifier) (identifier)))

  (call_expression
    (identifier)
    (argument_list
      (macrocall_expression (macro_identifier (identifier)))
      (string_literal)))

  (macrocall_expression
    (macro_identifier (identifier))
    (macro_argument_list
      (binary_expression (identifier) (operator) (identifier))
      (string_literal)))

  (macrocall_expression
    (macro_identifier (operator))
    (macro_argument_list
      (binary_expression
        (binary_expression (identifier) (operator) (identifier))
        (operator)
        (identifier))))

  (macrocall_expression
    (macro_identifier (identifier))
    (macro_argument_list
      (string_literal)
      (compound_statement (assignment (identifier) (operator) (identifier)))))

  (macrocall_expression
    (macro_identifier (identifier))
    (macro_argument_list
      (macrocall_expression
        (macro_identifier (identifier))
        (macro_argument_list
          (call_expression (identifier) (argument_list (identifier))))))))


==============================
quote expressions
==============================

:foo
:const

:(x; y)
:(x, y)
:[x, y, z]


---
(source_file
  (quote_expression (identifier))
  (quote_expression (identifier))

  (quote_expression
    (parenthesized_expression
      (identifier)
      (identifier)))
  (quote_expression
    (tuple_expression
      (identifier)
      (identifier)))
  (quote_expression
    (array_expression
      (identifier)
      (identifier)
      (identifier))))


==============================
interpolation expressions
==============================

$foo
$obj.field
$(obj.field)
$f(x)
$f[1, 2]

---

(source_file
  (interpolation_expression
    (identifier))
  (field_expression
    (interpolation_expression
      (identifier))
    (identifier))
  (interpolation_expression
    (parenthesized_expression
      (field_expression
        (identifier)
        (identifier))))
  (call_expression
    (interpolation_expression
      (identifier))
    (argument_list
      (identifier)))
  (index_expression
    (interpolation_expression
      (identifier))
    (integer_literal)
    (integer_literal)))


===========================
Coefficient expressions
===========================

2x^2 - .3x + 1
2(x-1)^2 - 3(x-1) + 1
5u"kg"

---

(source_file
  (binary_expression
    (binary_expression
      (binary_expression
        (coefficient_expression (integer_literal) (identifier))
        (operator)
        (integer_literal))
      (operator)
      (coefficient_expression (float_literal) (identifier)))
    (operator)
    (integer_literal))
  (binary_expression
    (binary_expression
      (binary_expression
        (coefficient_expression
          (integer_literal)
          (parenthesized_expression (binary_expression (identifier) (operator) (integer_literal))))
        (operator)
        (integer_literal))
      (operator)
      (coefficient_expression
        (integer_literal)
        (parenthesized_expression (binary_expression (identifier) (operator) (integer_literal)))))
    (operator)
    (integer_literal))
  (coefficient_expression
    (integer_literal)
    (prefixed_string_literal (identifier))))

=================
Tuples
=================

()
(1)
(1,)
(2,3,4,)

---

(source_file
  (tuple_expression)
  (parenthesized_expression (integer_literal))
  (tuple_expression (integer_literal))
  (tuple_expression (integer_literal) (integer_literal) (integer_literal)))

=================
Named tuples
=================

(a = 1)
(a = 1,)
(a = 1, b = 2)
(;)
(; a)
(; a = 1)
(; a = 1, b = 2)
(; a, foo.b)

---

(source_file
  (parenthesized_expression
    (assignment (identifier) (operator) (integer_literal)))
  (named_tuple_expression
    (named_field (identifier) (integer_literal)))
  (named_tuple_expression
    (named_field (identifier) (integer_literal))
    (named_field (identifier) (integer_literal)))
  (named_tuple_expression)
  (named_tuple_expression
    (identifier))
  (named_tuple_expression
    (named_field (identifier) (integer_literal)))
  (named_tuple_expression
    (named_field (identifier) (integer_literal))
    (named_field (identifier) (integer_literal)))
  (named_tuple_expression
    (identifier)
    (field_expression (identifier) (identifier))))

=================
Arrays
=================

[]
[1, 2,]

---

(source_file
  (array_expression)
  (array_expression (integer_literal) (integer_literal)))

=================
Matrices
=================

[1 2]
[1 2; 3 4]
[1 2; 3 4;]

---

(source_file
  (matrix_expression
    (matrix_row (integer_literal) (integer_literal)))
  (matrix_expression
    (matrix_row (integer_literal) (integer_literal))
    (matrix_row (integer_literal) (integer_literal)))
  (matrix_expression
    (matrix_row (integer_literal) (integer_literal))
    (matrix_row (integer_literal) (integer_literal))))


====================
Function expressions
====================

x -> x^2
(x,y,z)->2x+y-z
()->3
() -> (sleep(0.1); i += 1; l)

---

(source_file
  (function_expression
    (identifier)
    (binary_expression (identifier) (operator) (integer_literal)))
  (function_expression
    (parameter_list (identifier) (identifier) (identifier))
    (binary_expression
      (binary_expression
        (coefficient_expression (integer_literal) (identifier))
        (operator)
        (identifier))
      (operator)
      (identifier)))
  (function_expression
    (parameter_list)
    (integer_literal))
  (function_expression
    (parameter_list)
    (parenthesized_expression
      (call_expression (identifier) (argument_list (float_literal)))
      (compound_assignment_expression (identifier) (operator) (integer_literal))
      (identifier))))

============================
Generator expressions
============================

(b(c, e) for c in d, e = 5 if e)
[b(c, e) for c in d for e in f]

---

(source_file
  (generator_expression
    (call_expression (identifier) (argument_list (identifier) (identifier)))
    (for_clause
      (for_binding (identifier) (identifier))
      (for_binding (identifier) (integer_literal)))
    (if_clause (identifier)))
  (array_comprehension_expression
    (call_expression (identifier) (argument_list (identifier) (identifier)))
    (for_clause (for_binding (identifier) (identifier)))
    (for_clause (for_binding (identifier) (identifier)))))
